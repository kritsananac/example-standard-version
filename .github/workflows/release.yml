name: Release version

on:
  workflow_dispatch:
    inputs:
      release_type:
        required: true
        description: "Release Type ( auto, alpha, major, minor, patch or release )"
        default: "alpha"

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Yarn install
        run: yarn install

      - name: Setup git user
        run: |
          git config user.name standard-version-bot
          git config user.email standard-version-bot@users.noreply.github.com

      - name: Generate Version Tag Auto
        if: ${{ github.event.inputs.release_type  == 'auto' }}
        run: |
          npx standard-version

      - name: Generate Version Tag release-as ${{ github.event.inputs.release_type }}
        if: ${{ github.event.inputs.release_type  == 'major' || github.event.inputs.release_type  == 'minor' || github.event.inputs.release_type == 'patch' }}
        run: |
          npx standard-version --release-as ${{ github.event.inputs.release_type }}

      - name: Generate Version Tag release-as ${{ github.event.inputs.release_type }}
        if: ${{ github.event.inputs.release_type == 'alpha' }}
        run: |
          npx standard-version --prerelease ${{ github.event.inputs.release_type }} --skip.changelog

      - name: Generate Version Tag release-as ${{ github.event.inputs.release_type }}
        if: ${{ github.event.inputs.release_type == 'release' }}
        run: |
          npx standard-version

      - name: Publish tag
        id: publish_tag
        run: |
          git push --follow-tags
          echo ::set-output name=tag_name::$(git describe HEAD --abbrev=0)
          echo ::set-output name=version::$(git describe HEAD --abbrev=0  | grep -oP "^versions/\K.*")

      - name: Upload Package.json
        uses: actions/upload-artifact@v2
        with:
          name: root-package
          path: package.json

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{ steps.publish_tag.outputs.version }}
          tag_name: ${{ steps.publish_tag.outputs.tag_name }}
          body_path: CHANGELOG.md

      - name: Get Version
        id: get-version
        run: |
          echo ::set-output name=version::$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
